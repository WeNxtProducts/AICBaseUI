import React, { useEffect, useRef, useState } from 'react';
import { Button } from 'antd';
import './TableComponent.scss';

const TableComponent = ({
  tableColumn,
  tableData,
  action = true,
  handleSort,
  process = false,
  handleEdit,
  handleDelete,
  isDelete = true,
  editIcon = 'bi bi-pencil-square',
  handleProcessData = () => { },
}) => {
  const column = tableColumn?.length > 0 ? JSON.parse(tableColumn) : tableColumn;
  const tableRefs = useRef([]);
  const [sortState, setSortState] = useState({});

  useEffect(() => {
    document.documentElement.style.setProperty('--column-count', Object.keys(column).length);
  }, [tableColumn]);

  const sortTable = (columnName, sortOrder) => {
    setSortState({ [columnName]: sortOrder });
    handleSort(columnName, sortOrder);
  };

  const scrollToRow = id => {
    const row = tableRefs.current.find(ref => {
      return ref.getAttribute('data-id') == id;
    });
    if (row) {
      row.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  };

  return (
    <div className='table-container-common-table'>
      {/* <button onClick={() => scrollToRow("10")}>Click</button> */}
      {tableData?.length > 0 && (
        <table className='custom-table'>
          <thead>
            <tr>
              {Object.keys(column)?.map(item => {
                return (
                  <th key={item}>
                    <div className='flex'>
                      <p className='select-none'>{column[item]}</p>
                      <div className='sort-icon-container ml-3 cursor-pointer'>
                        <i
                          className={`bi bi-caret-up-fill sort-icon ${sortState[item] === 'asc' ? 'highlight' : ''
                            }`}
                          onClick={() => sortTable(item, 'asc')}></i>
                        <i
                          className={`bi bi-caret-down-fill sort-icon ${sortState[item] === 'desc' ? 'highlight' : ''
                            }`}
                          onClick={() => sortTable(item, 'desc')}></i>
                      </div>
                    </div>
                  </th>
                );
              })}
              {action && <th className='last-column-action'>Actions</th>}
            </tr>
          </thead>
          {tableData?.length > 0 && (
            <tbody>
              {tableData?.map((item, index) => {
                return (
                  <tr key={index} data-id={index} ref={ref => (tableRefs.current[index] = ref)}>
                    {Object.keys(column)?.map(currentValue => {
                      const mainKey = column[currentValue];
                      return (
                        <td className='select-none' key={mainKey}>
                          {item[currentValue]}
                        </td>
                      );
                    })}
                    {action && (
                      <td>
                        <div className='icon-container'>
                          <i onClick={() => handleEdit(item)} className={editIcon} />
                          {isDelete && <i className='bi bi-trash' onClick={() => handleDelete(item)} />}
                          {process && (
                            <Button onClick={() => handleProcessData(item)} className='process-button'>
                              Process
                            </Button>
                          )}
                        </div>
                      </td>
                    )}
                  </tr>
                );
              })}
            </tbody>
          )}
        </table>
      )}
    </div>
  );
};

export default TableComponent;



.scss
@import '../../styles/variable';

.table-container-common-table {
    .custom-table {
        width: 100%;
        border-collapse: collapse;
        // table-layout: auto;
    }

    .custom-table th,
    .custom-table td {
        padding: 7px;
        // width: calc(100% / 3);
        text-align: left;
    }

    .custom-table tbody tr {
        border-bottom: 1px solid #eeeff0;
    }

    .custom-table thead {
        border: 2px solid #eeeff0;
        position: sticky;
        top: 0;
        background-color: #ffffff;
        z-index: 1;
    }

    .custom-table thead::before {
        content: '';
        display: block;
        width: 100%;
        height: 1px;
        background-color: #eeeff0;
        position: absolute;
        top: 100%;
        left: 0;
    }

    .custom-table thead tr th {
        color: #7e8490;
        font-size: 14px;
        font-weight: 700;
    }

    .custom-table tbody td {
        color: #727D73;
        font-size: 13px;
        font-weight: 400;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .icon-container {
        display: flex;
        justify-content: center;
        align-items: center;

        & i {
            cursor: pointer;
            margin-right: 15px;
        }
    }

    .sort-icon-container {
        display: flex;
        align-items: center;
        cursor: pointer;

        .sort-icon {
            font-size: 1rem;
            margin-left: 0.5rem;
            color: #6c757d; // default color

            &.highlight {
                color: #007bff; // highlight color when active
            }
        }
    }


    // .sort-icon-container {
    //     display: flex;
    //     flex-direction: column;
    //     line-height: 0px;
    //     margin-top: 4px;

    //     .sort-icon {
    //         color: #c0c0c0;
    //         font-size: 8px;
    //     }

    //     .highlight {
    //         color: #2c99d6;
    //     }
    // }

    tbody tr:hover {
        background-color: rgb(251, 251, 251);
    }

    .last-column-action {
        width: 7%;
    }

    .custom-table th:not(:last-child),
    .custom-table td:not(:last-child) {
        width: calc(93% / var(--column-count));
    }

    .custom-table th:last-child {
        //   text-align: center;
    }

    .process-button {
        // height: 25px;
        padding: 0 8px;
        font-size: 14px;
        text-align: center;
        background-color: $app-font-color;
        color: #ffffff;
    }
}