 
 // OLD
 const renderBrokers = (brokers, level = 1) => {
        return (
            <div className='sub-broker-list col-span-6'>
                {brokers.map((broker) => {
                    const brokerId = `${broker.PBRK_BRK_CODE}-${level}`;
                    const isCollapsed = collapsedBrokers[brokerId] ?? false;

                    return (
                        <div key={brokerId} className='broker-wrapper'>
                            <div
                                className='broker-card mt-2 grid grid-cols-12 gap-x-1'
                                style={{ marginLeft: `${level * 15}px` }}
                            >

                                <div className='broker-details col-span-11 flex items-center justify-between pe-4'>
                                    <p className='m-0'><strong>Code:</strong> {broker.PBRK_BRK_CODE}</p>
                                    <p className='m-0'><strong>Designation:</strong> {broker.PBRK_BRK_DESGNATION}</p>
                                    <p className='m-0'><strong>Percentage:</strong> {broker.PBRK_BRK_PERC}%</p>
                                </div>

                                <div className='col-span-1 action-sub'>
                                    <div className='flex items-center justify-between'>
                                        <div className='mt-1 m-auto'>
                                            <Popover
                                                overlayClassName={'broker_details_Popover'}
                                                content={<BrokerRates brokerId={'100066'} code={'100066'} />}
                                                trigger='hover'>
                                                <InfoCircleOutlined className='info-icon' />
                                            </Popover>
                                        </div>
                                        <div>
                                            {broker?.children && broker?.children.length > 0 && (
                                                <button
                                                    type='button'
                                                    className={`collapse-icon ${isCollapsed ? 'rotate-icon' : ''}`}
                                                    onClick={() => toggleCollapse(brokerId)}
                                                >
                                                    <RightOutlined />
                                                </button>
                                            )}
                                        </div>

                                    </div>
                                </div>

                            </div>


                            {/* Render Children */}
                            {isCollapsed && broker.children && broker.children.length > 0 && (
                                <div className='children'>
                                    {renderBrokers(broker.children, level + 1)}
                                </div>
                            )}
                        </div>
                    );
                })}
            </div>
        );
    };


// New

    const renderBrokers = (brokers, level = 0, parentId) => {
        return (
            <div className='sub-broker-list col-span-7 grid grid-cols-8'>
                {brokers.map((broker, index) => {
                    const brokerId = `${broker.PBRK_BRK_CODE}-${level}`;
                    const isCollapsed = collapsedBrokers[brokerId] ?? false;

                    return (
                        <div key={`${brokerId}-${level}-${index}-child`} className='broker-wrapper col-span-7 grid grid-cols-12'>
                            <div
                                className='broker-card mt-2 grid grid-cols-12 gap-x-1 col-span-11'
                                style={{ marginLeft: `${level * 15}px` }}
                            >

                                <div className='broker-details col-span-11 flex items-center justify-between pe-4'>
                                    <p className='m-0'><strong>Name:</strong> {broker.PBRK_BRK_NAME}</p>
                                    <p className='m-0'><strong>Code:</strong> {broker.PBRK_BRK_CODE}</p>
                                    <p className='m-0'><strong>Percentage:</strong> {broker.PBRK_BRK_PERC}%</p>
                                </div>

                                <div className='col-span-1 action-sub'>
                                    <div className='flex items-center justify-between'>
                                        <div className='mt-1 m-auto'>
                                            <Popover
                                                overlayClassName={'broker_details_Popover'}
                                                content={<BrokerRates brokerId={broker?.PBRK_TRAN_ID}
                                                    code={broker?.PBRK_BRK_CODE}
                                                    brokerName={broker?.PBRK_BRK_NAME} />}
                                                trigger='hover'>
                                                <InfoCircleOutlined className='info-icon' />
                                            </Popover>
                                        </div>
                                        <div>
                                            {broker?.children && broker?.children.length > 0 && (
                                                <button
                                                    type='button'
                                                    className={`collapse-icon ${isCollapsed ? 'rotate-icon' : ''}`}
                                                    onClick={() => toggleCollapse(brokerId)}
                                                >
                                                    <RightOutlined />
                                                </button>
                                            )}
                                        </div>

                                    </div>
                                </div>

                            </div>

                            {/* <div className='ml-5 col-span-1 flex items-center'>
                                {!freeze && (
                                    <button type='button' onClick={() => {
                                        handleDeleteBroker(broker?.PBRK_TRAN_ID, parentId)
                                    }}>
                                        <DeleteOutlined className='delete-button' />
                                    </button>
                                )}
                            </div> */}


                            {/* Render Children */}
                            {isCollapsed && broker.children && broker.children.length > 0 && (
                                <div className='children'>
                                    {renderBrokers(broker.children, level + 1, parentId)}
                                </div>
                            )}
                        </div>
                    );
                })}
            </div>
        );
    };