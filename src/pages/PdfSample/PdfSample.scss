.own_table {
 width: 100%;
 border: 1px solid red;
}

.grouped-table-container {
 width: 80%;
 margin: 20px auto;
 border: 1px solid #ddd;
 border-radius: 8px;
 box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.controls {
 display: flex;
 justify-content: space-between;
 align-items: center;
 padding: 10px;
 background-color: #f9f9f9;
 border-bottom: 1px solid #ddd;
}

.controls label {
 margin-right: 10px;
}

.export-button {
 border: 1px solid green;
 padding: 10px;
}

.controls select {
 padding: 5px;
 border: 1px solid #ddd;
 border-radius: 4px;
}

.cancel-button {
 padding: 5px 10px;
 background-color: #f44336;
 color: white;
 border: none;
 border-radius: 4px;
 cursor: pointer;
}

.cancel-button:hover {
 background-color: #d32f2f;
}

.grouped-table {
 width: 100%;
 table-layout: fixed;
 border-collapse: collapse;
}

.grouped-table th,
.grouped-table td {
 padding: 10px;
 text-align: left;
 border-bottom: 1px solid #ddd;
}

.group-header {
 background-color: #f1f1f1;
 cursor: pointer;
}

.group-item:nth-child(even) {
 background-color: #f9f9f9;
}

.group-item:hover {
 background-color: #f1f1f1;
}

.own-table {
 table {
  font-family: arial, sans-serif;
  border-collapse: collapse;
  width: 100%;
 }

 td,
 th {
  border: 1px solid #dddddd;
  text-align: left;
  padding: 8px;
 }

 .own_table tr {
  display: table-row;
 }

 /* Hide rows under collapsed parent rows */
 .own_table tr.collapsed + tr {
  display: none;
 }

 /* Hide rows under collapsed parent rows recursively */
 .own_table tr.collapsed + tr ~ tr.level-1,
 .own_table tr.collapsed + tr ~ tr.level-2,
 .own_table tr.collapsed + tr ~ tr.level-3 {
  display: none;
 }
}

// const renderTableOwn = (data, level = 0) => {
//   return Object.entries(data).map(([key, value]) => (
//    <React.Fragment key={key}>
//     <tr>
//      <td style={{ padding: `${level + 1 * 10}px` }}>
//       <span style={{ paddingLeft: `${level * 20}px` }}>-</span>
//      </td>
//      <td colSpan={3} style={{ fontWeight: 'bold', backgroundColor: '#f0f0f0' }}>
//       {`${groupBy[level]} : ${key}`}
//      </td>
//     </tr>
//     {typeof value === 'object' && !Array.isArray(value)
//      ? renderTableOwn(value, level + 1)
//      : Array.isArray(value)
//      ? value.map((item, index) => (
//         <tr key={index}>
//          <td style={{ width: '10px', padding: '0' }}>
//           <span></span>
//          </td>
//          <td>{item.name}</td>
//          <td>{item.age}</td>
//          <td>{item.city}</td>
//         </tr>
//        ))
//      : null}
//    </React.Fragment>
//   ));
//  };
