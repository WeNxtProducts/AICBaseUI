.jsx


import React, { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import "./sidebar.scss";

const Sidebar = () => {
  const [isExpanded, setIsExpanded] = useState(false);

  const menuItems = [
    { icon: "🏠", title: "Home" },
    {
      icon: "📁",
      title: "Projects",
      subItems: [
        {
          icon: "📄",
          title: "Project 1",
          subItems: [
            { icon: "📝", title: "Tasks" },
            { icon: "👥", title: "Team" },
          ],
        },
        {
          icon: "📄",
          title: "Project 2",
          subItems: [
            { icon: "📊", title: "Analytics" },
            { icon: "💰", title: "Budget" },
          ],
        },
      ],
    },
    { icon: "📊", title: "Analytics" },
    {
      icon: "⚙️",
      title: "Settings",
      subItems: [
        { icon: "👤", title: "Profile" },
        {
          icon: "🔒",
          title: "Security",
          subItems: [
            { icon: "🔑", title: "Passwords" },
            { icon: "📱", title: "Two-Factor Auth" },
          ],
        },
      ],
    },
  ];

  return (
    <motion.div
      className={`sidebar ${isExpanded ? "expanded" : ""}`}
      onMouseEnter={() => setIsExpanded(true)}
      onMouseLeave={() => setIsExpanded(false)}
      initial={false}
      animate={{
        width: isExpanded ? 250 : 70,
        transition: { duration: 0.3, ease: "easeInOut" },
      }}
    >
      <ul>
        {menuItems.map((item, index) => (
          <MenuItem key={index} item={item} isExpanded={isExpanded} level={0} />
        ))}
      </ul>
    </motion.div>
  );
};

const MenuItem = ({ item, isExpanded, level }) => {
  const [isOpen, setIsOpen] = useState(false);

  const renderLevelLines = () => {
    return Array.from({ length: level }, (_, index) => (
      <div key={index} className={`level-line level-${index + 1}`} />
    ));
  };

  return (
    <motion.li
      className={`level-${level}`}
      initial={false}
      animate={{ opacity: 1, x: 0 }}
      exit={{ opacity: 0, x: -20 }}
      transition={{ duration: 0.2 }}
    >
      <div
        className={`menu-item ${isOpen ? "open" : ""}`}
        onClick={() => item.subItems && setIsOpen(!isOpen)}
      >
        {renderLevelLines()}
        <span className={`icon ${level === 0 ? "level-0" : ""}`}>
          {item.icon}
        </span>
        <AnimatePresence>
          {isExpanded && (
            <motion.span
              className="title"
              initial={{ opacity: 0, x: -10 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -10 }}
              transition={{ duration: 0.2 }}
            >
              {item.title}
            </motion.span>
          )}
        </AnimatePresence>
        {item.subItems && isExpanded && (
          <span className="arrow">{isOpen ? "▼" : "▶"}</span>
        )}
      </div>
      <AnimatePresence>
        {item.subItems && isOpen && isExpanded && (
          <motion.ul
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
          >
            {item.subItems.map((subItem, index) => (
              <MenuItem
                key={index}
                item={subItem}
                isExpanded={isExpanded}
                level={level + 1}
              />
            ))}
          </motion.ul>
        )}
      </AnimatePresence>
    </motion.li>
  );
};

export default Sidebar;



.scss

$primary-color: #6366f1;
$secondary-color: #a5b4fc;
$background-color: #f8fafc;
$text-color: #1e293b;
$hover-color: #e2e8f0;

.sidebar {
  transition: width 0.3s ease, box-shadow 0.3s ease;
  background-color: $background-color;
  height: 100vh;
  overflow: hidden;
  position: fixed;
  left: 0;
  top: 0;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
  font-family: "Inter", sans-serif;

  &.expanded {
    width: 250px;
    overflow: auto;
  }

  &:not(.expanded) {
    width: 70px;
  }

  ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
}

.menu-item {
  display: flex;
  align-items: center;
  padding: 12px 15px;
  cursor: pointer;
  position: relative;
  white-space: nowrap;
  transition: all 0.2s ease;
  color: $text-color;

  &:hover {
    background-color: $hover-color;
  }

  &.open {
    background-color: rgba($primary-color, 0.1);
  }

  .icon {
    margin-right: 15px;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    font-size: 16px;
    transition: all 0.2s ease;

    &.level-0 {
      background-color: $primary-color;
      color: white;
      box-shadow: 0 4px 6px rgba($primary-color, 0.25);
    }
  }

  .title {
    font-size: 14px;
    font-weight: 500;
    opacity: 0;
    transform: translateX(-10px);
    transition: all 0.2s ease;

    .expanded & {
      opacity: 1;
      transform: translateX(0);
    }
  }

  .arrow {
    margin-left: auto;
    font-size: 12px;
    transition: transform 0.2s;
    color: $secondary-color;

    .open & {
      transform: rotate(180deg);
    }
  }
}

.level-line {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 2px;
  background-image: linear-gradient(
    to bottom,
    $secondary-color 50%,
    transparent 50%
  );
  background-size: 100% 8px;
  opacity: 0.5;
}

@for $i from 1 through 5 {
  .level-#{$i} {
    .icon {
      margin-left: $i * 20px;
    }

    .level-line:nth-child(#{$i}) {
      left: $i * 20px;
    }
  }
}

// Modern scrollbar styles
.sidebar::-webkit-scrollbar {
  width: 6px;
}

.sidebar::-webkit-scrollbar-track {
  background: $background-color;
}

.sidebar::-webkit-scrollbar-thumb {
  background-color: $secondary-color;
  border-radius: 3px;
}
