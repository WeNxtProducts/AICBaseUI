.jsx

import React, { useState } from 'react';
import { Table, Input, Checkbox, Button, Popover } from 'antd';
import { useDebounce } from 'use-debounce';
import { faker } from '@faker-js/faker';
import './index.scss';

const generateData = () => {
        return Array.from({ length: 100 }, (_, index) => ({
            key: index + 1,
            name: faker.person.fullName(),
            email: faker.internet.email(),
            phone: faker.number.int({ min: 18, max: 65 }),
            company: faker.company.name(),
            website: faker.internet.url(),
            address: faker.location.streetAddress(),
        }));
    };

const generateData = () => {
  return Array.from({ length: 100 }, (_, i) => ({
    key: i,
    name: faker.person.fullName(),
    age: faker.number.int({ min: 18, max: 65 }),
    address: faker.location.streetAddress(),
    occupation: faker.person.jobTitle(),
    company: faker.company.name(),
    city: faker.location.city(),
    country: faker.location.country(),
  }));
};

const data = generateData();

const highlightText = (text, searchTerm) => {
  if (!searchTerm) return text;
  const regex = new RegExp(`(${searchTerm})`, 'gi');
  const parts = text.toString().split(regex);
  return parts.map((part, index) =>
    part.toLowerCase() === searchTerm.toLowerCase() ? (
      <span key={index} className="highlight">{part}</span>
    ) : (
      part
    )
  );
};

const MultiRowTable = () => {
  const [pagination, setPagination] = useState({ current: 1, pageSize: 20 });
  const [searchTerm, setSearchTerm] = useState('');
  const [filteredData, setFilteredData] = useState(data);
  const [selectedColumns, setSelectedColumns] = useState(['All']);
  const [selectedRowKeys, setSelectedRowKeys] = useState([]); // State to manage selected row keys
  const [debouncedSearchTerm] = useDebounce(searchTerm, 300);

  const handleColumnFilterChange = (column) => {
    setSelectedColumns((prev) => {
      if (column === 'All') return ['All'];
      const newSelection = prev.includes(column)
        ? prev.filter((col) => col !== column)
        : [...prev.filter((col) => col !== 'All'), column];
      return newSelection.length === 0 ? ['All'] : newSelection;
    });
  };

  const handleTableChange = (pagination) => {
    setPagination(pagination);
  };

  React.useEffect(() => {
    const filtered = data.filter((item) => {
      return selectedColumns.includes('All')
        ? Object.values(item).some((val) =>
          val.toString().toLowerCase().includes(debouncedSearchTerm.toLowerCase())
        )
        : selectedColumns.some((col) =>
          item[col]?.toString().toLowerCase().includes(debouncedSearchTerm.toLowerCase())
        );
    });
    setFilteredData(filtered);
  }, [debouncedSearchTerm, selectedColumns]);

  const paginatedData = filteredData.slice(
    (pagination.current - 1) * pagination.pageSize,
    pagination.current * pagination.pageSize
  );

  const columns = [
    {
      title: 'Name',
      dataIndex: 'name',
      key: 'name',
      render: (text) =>
        selectedColumns.includes('name') || selectedColumns.includes('All')
          ? highlightText(text, debouncedSearchTerm)
          : text,
    },
    {
      title: 'Age',
      dataIndex: 'age',
      key: 'age',
      render: (text) =>
        selectedColumns.includes('age') || selectedColumns.includes('All')
          ? highlightText(text, debouncedSearchTerm)
          : text,
    },
    {
      title: 'Address',
      dataIndex: 'address',
      key: 'address',
      render: (text) =>
        selectedColumns.includes('address') || selectedColumns.includes('All')
          ? highlightText(text, debouncedSearchTerm)
          : text,
    },
    {
      title: 'Occupation',
      dataIndex: 'occupation',
      key: 'occupation',
      render: (text) =>
        selectedColumns.includes('occupation') || selectedColumns.includes('All')
          ? highlightText(text, debouncedSearchTerm)
          : text,
    },
    {
      title: 'Company',
      dataIndex: 'company',
      key: 'company',
      render: (text) =>
        selectedColumns.includes('company') || selectedColumns.includes('All')
          ? highlightText(text, debouncedSearchTerm)
          : text,
    },
  ];

  const filterOptions = ['All', 'name', 'age', 'address', 'occupation', 'company'];

  // Row selection configuration
  const rowSelection = {
    selectedRowKeys,
    onChange: (selectedKeys) => {
      setSelectedRowKeys(selectedKeys); // Update selected row keys
    },
  };

  // Define the expanded row rendering
  const expandedRowRender = (record) => (
    <div style={{ marginLeft: '40px' }}>
      <p><strong>City:</strong> {record.city}</p>
      <p><strong>Country:</strong> {record.country}</p>
    </div>
  );

  return (
    <div className="minimalist-table-container">
      <div style={{ display: 'flex', marginBottom: 16, gap: '8px' }}>
        <Input
          placeholder="Search across selected columns"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="minimalist-search"
        />
        <Popover
          trigger="click"
          content={
            <div>
              {filterOptions.map((col) => (
                <div key={col}>
                  <Checkbox
                    checked={selectedColumns.includes(col)}
                    onChange={() => handleColumnFilterChange(col)}
                  >
                    {col.charAt(0).toUpperCase() + col.slice(1)}
                  </Checkbox>
                </div>
              ))}
            </div>
          }
        >
          <Button>Filter</Button>
        </Popover>
      </div>
      <Table
        columns={columns}
        dataSource={paginatedData}
        expandable={{ expandedRowRender }}
        rowSelection={rowSelection}
        pagination={{
          ...pagination,
          total: filteredData.length,
          showTotal: (total) => `Total ${total} items`,
          size: 'small',
        }}
        onChange={handleTableChange}
        scroll={{ x: 1000, y: 350 }}
        rowClassName={(record, index) => (index % 2 === 0 ? 'minimalist-row-light' : 'minimalist-row-dark')}
        sticky
      />
    </div>
  );
};

export default MultiRowTable;


.scss
.minimalist-table-container {
 .ant-table {
  border-radius: 6px;
  box-shadow: none;
  background-color: #ffffff;
  border: 1px solid #f0f0f0;
 }

 .ant-table-thead > tr > th {
  background-color: #fafafa;
  color: #333;
  font-weight: 500;
  text-align: left;
  border-bottom: 1px solid #e8e8e8;
  padding: 12px;
 }

 .ant-table-tbody > tr > td {
  padding: 12px;
  text-align: left;
  font-size: 14px;
  border-bottom: 1px solid #f0f0f0;
  transition: background-color 0.3s ease;
 }

 .minimalist-row-light {
  background-color: #ffffff;
 }

 .minimalist-row-dark {
  background-color: #fafafa;
 }

 .minimalist-row-light:hover,
 .minimalist-row-dark:hover {
  background-color: #f5f5f5;
 }

 .highlight {
  background-color: yellow;
  font-weight: bold;
 }

 .ant-pagination {
  padding: 10px 0;
 }

 // Minimalist search input
 .minimalist-search {
  margin-bottom: 16px;
  width: 100%;
  max-width: 400px;
 }

 // Custom scroll bar for minimalist look

 // Fixing the first column
 .ant-table-cell-fixed-left {
  background-color: #ffffff;
 }

 .ant-table-body {
  scrollbar-width: auto;
  scrollbar-color: auto;

  &::-webkit-scrollbar {
   width: 3px;
  }

  &::-webkit-scrollbar-track {
   background-color: #e1e6e6;
  }

  &::-webkit-scrollbar-thumb {
   border-radius: 6px;
   background-color: #68bef3;
  }
 }
}
